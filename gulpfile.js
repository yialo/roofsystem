'use strict';

// Plugin variables

const autoprefixer = require('autoprefixer');
const del = require('del');
const flatten = require('gulp-flatten');
const gifsicle = require('imagemin-gifsicle');
const gulp = require('gulp');
const jpegtran = require('imagemin-jpegtran');
const mincss = require('gulp-csso');
const minhtml = require('gulp-htmlmin');
const minimage = require('gulp-imagemin');
const minjs = require('gulp-terser');
const mozjpeg = require('imagemin-mozjpeg');
const plumber = require('gulp-plumber');
const pngquant = require('imagemin-pngquant');
const postcss = require('gulp-postcss');
const pug = require('gulp-pug');
const rename = require('gulp-rename');
const sass = require('gulp-sass');
const sassglob = require('gulp-sass-glob');
const server = require('browser-sync').create();
const validator = require('gulp-w3c-html-validator');
const zopfli = require('imagemin-zopfli');

// Vinyl data and methods

const imageProcessingPaths = {
  input: './spec/img-processing/input/',
  output: './spec/img-processing/output/',
};
const bitmapExts = '{gif,jpg,png}';
const fontExts = '{woff,woff2}';

const getSrc = function getSourcePathsForCopy(srcFolder, extSet) {
  const globalPath = `./app/global/${srcFolder}/*.${extSet}`;
  const componentsPath = `./app/components/**/${srcFolder}/**/*.${extSet}`;
  return [globalPath, componentsPath];
};

const bitmapsSrc = getSrc('bitmaps', bitmapExts);
const faviconstSrc = './app/global/favicons/*';
const fontsSrc = `./app/global/fonts/*.${fontExts}`;
const jsSrc = [
  './app/scripts/*.js',
  './app/vendors/*.js',
  './app/vendors_customized/*.js',
];
const svgSrc = getSrc('svg', 'svg');
const videoSrc = getSrc('video', 'mp4');
const cssSrc = './app/base/main.scss';
const pugSrc = './app/pages/*.pug';

// Complex settings for modules

const minhtmlSettings = {
  caseSensitive: false,
  collapseBooleanAttributes: false,
  collapseInlineTagWhitespace: false,
  collapseWhitespace: false,
  conservativeCollapse: false,
  continueOnParseError: false,
  customAttrAssign: [],
  customAttrCollapse: null,
  customAttrSurround: [],
  customEventAttributes: [/^on[a-z]{3,}$/],
  decodeEntities: false,
  html5: true,
  ignoreCustomComments: [/^!/],
  ignoreCustomFragments: [/<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/],
  includeAutoGeneratedTags: true,
  keepClosingSlash: false,
  maxLineLength: null,
  minifyCSS: true,
  minifyJS: true,
  minifyURLs: false,
  preserveLineBreaks: false,
  preventAttributesEscaping: false,
  processConditionalComments: false,
  processScripts: [],
  quoteCharacter: null,
  removeAttributeQuotes: false,
  removeComments: true,
  removeEmptyAttributes: false,
  removeEmptyElements: false,
  removeOptionalTags: false,
  removeRedundantAttributes: false,
  removeScriptTypeAttributes: false,
  removeStyleLinkTypeAttributes: false,
  removeTagWhitespace: false,
  sortAttributes: false,
  sortClassName: false,
  trimCustomFragments: false,
  useShortDoctype: false,
};

const serverSettings = {
  cors: true,
  notify: false,
  open: true,
  server: { baseDir: './dist/' },
};

const svgoSettings = [
  { addAttributesToSVGElement: false },
  { addClassesToSVGElement: false },
  { cleanupAttrs: false },
  { cleanupEnableBackground: true },
  { cleanupIDs: false },
  { cleanupListOfValues: true },
  { cleanupNumericValues: true },
  { collapseGroups: true },
  { convertColors: true },
  { convertPathData: true },
  { convertShapeToPath: false },
  { convertStyleToAttrs: false },
  { convertTransform: true },
  { inlineStyles: false },
  { mergePaths: true },
  { minifyStyles: false },
  { moveElemsAttrsToGroup: true },
  { moveGroupAttrsToElems: false },
  { prefixIds: false },
  { removeAttrs: true },
  { removeComments: true },
  { removeDesc: true },
  { removeDimensions: true },
  { removeDoctype: true },
  { removeEditorsNSData: true },
  { removeElementsByAttr: false },
  { removeEmptyAttrs: true },
  { removeEmptyContainers: true },
  { removeEmptyText: true },
  { removeHiddenElems: true },
  { removeMetadata: true },
  { removeNonInheritableGroupAttrs: true },
  { removeRasterimg: false },
  { removeScriptElement: true },
  { removeStyleElement: true },
  { removeTitle: true },
  { removeUnknownsAndDefaults: true },
  { removeUnusedNS: true },
  { removeUselessDefs: false },
  { removeUselessStrokeAndFill: true },
  { removeViewBox: false },
  { removeXMLNS: false },
  { removeXMLProcInst: true },
  { sortAttrs: false },
];

// Task functions

const minsvg = function mimimizeSvgImages() {
  return gulp
    .src(`${imageProcessingPaths.input}*.svg`)
    .pipe(
      minimage([
        minimage.svgo({ plugins: svgoSettings }),
      ]),
    )
    .pipe(gulp.dest(imageProcessingPaths.output));
};

const minbitmap = function minimizeBitmapImages() {
  return gulp
    .src(`${imageProcessingPaths.input}*.${bitmapExts}`)
    .pipe(
      minimage([
        gifsicle(),
        jpegtran({ progressive: true }),
        mozjpeg({ quality: 90 }),
        pngquant({ speed: 1, quality: [0.8, 0.8] }),
        zopfli({ more: true }),
      ]),
    )
    .pipe(gulp.dest(imageProcessingPaths.output));
};

const validateHtml = function validateHtmlOutputFiles() {
  return gulp
    .src('./dist/*.html')
    .pipe(validator())
    .pipe(validator.reporter());
};

const removeHtmlComments = function removeCommentsFromHtmlFile() {
  return gulp
    .src('./dist/*.html')
    .pipe(minhtml(minhtmlSettings))
    .pipe(gulp.dest('./spec/html-minimized'));
};

const cleanbuild = function deleteFormerBuildFolder() {
  return del('./dist/');
};

const copyvideo = function copyVideoFilesToBuildFolder() {
  return gulp.src(videoSrc)
    .pipe(flatten())
    .pipe(gulp.dest('./dist/video/'));
};

const copyfavicons = function copyFaviconsToBuildFolder() {
  return gulp.src(faviconstSrc)
    .pipe(gulp.dest('./dist/favicons/'));
};

const copyfonts = function copyFontFilesToBuildFolder() {
  return gulp
    .src(fontsSrc)
    .pipe(gulp.dest('./dist/fonts/'));
};

const copysvg = function copySvgImagesToBuildFolder() {
  return gulp.src(svgSrc)
    .pipe(flatten())
    .pipe(gulp.dest('./dist/img/'));
};

const copybitmaps = function copyBitmapImagesToBuildFolder() {
  return gulp.src(bitmapsSrc)
    .pipe(flatten())
    .pipe(gulp.dest('./dist/img/'));
};

const scripts = function launchJsCompiler() {
  return gulp
    .src(jsSrc)
    .pipe(minjs())
    .pipe(gulp.dest('./dist/js/'));
};

const style = function launchCssCompiler() {
  return gulp
    .src(cssSrc)
    .pipe(plumber())
    .pipe(sassglob())
    .pipe(sass())
    .pipe(postcss([autoprefixer()]))
    .pipe(gulp.dest('./dist/css/'))
    .pipe(mincss())
    .pipe(rename('main.min.css'))
    .pipe(gulp.dest('./dist/css/'))
    .pipe(server.stream());
};

const html = function launchHtmlCompiler() {
  return gulp
    .src(pugSrc)
    .pipe(plumber())
    .pipe(pug({ pretty: true }))
    .pipe(gulp.dest('./dist/'))
    .pipe(server.stream());
};

const reload = function reloadBrowserSync(done) {
  server.reload();
  done();
};

const serve = function launchBrowserSync(done) {
  const streamWatchBase = './app/**/*.';
  server.init(serverSettings);
  done();
  gulp.watch(`${streamWatchBase}pug`, html);
  gulp.watch(`${streamWatchBase}scss`, style);
};

const watchJs = function watchForJavascriptFiles() {
  return gulp.watch(jsSrc, gulp.series(scripts, reload));
};

const watchSvg = function watchForSvgFiles() {
  return gulp.watch(svgSrc, gulp.series(copysvg, reload));
};

const watchBitmaps = function watchForBitmapFiles() {
  return gulp
    .watch(bitmapsSrc, gulp.series(copybitmaps, reload));
};

const watchFonts = function watchForFontFiles() {
  return gulp.watch(fontsSrc, gulp.series(copyfonts, reload));
};

const watchFavicons = function watchForFaviconFiles() {
  return gulp.watch(faviconstSrc, gulp.series(copyfavicons, reload));
};

// Tasks

gulp.task('svgmin', minsvg);
gulp.task('svgcopy', copysvg);
gulp.task('bitmapmin', minbitmap);
gulp.task('bitmapcopy', copybitmaps);
gulp.task('imagemin', gulp.parallel('svgmin', 'bitmapmin'));
gulp.task('imagecopy', gulp.parallel('svgcopy', 'bitmapcopy'));
gulp.task('validate', validateHtml);
gulp.task('cleanhtml', removeHtmlComments);
gulp.task(
  'copyassets',
  gulp.parallel(copyfonts, copyfavicons, 'imagecopy', copyvideo),
);
gulp.task('watchForAll', gulp.parallel(watchJs, watchSvg, watchBitmaps, watchFonts, watchFavicons));
gulp.task('build', gulp.series(cleanbuild, 'copyassets', scripts, style, html));
gulp.task('serve', gulp.series(serve, 'watchForAll'));

gulp.task('default', gulp.series('build', 'serve'));
